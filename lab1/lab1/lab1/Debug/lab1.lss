
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009cb  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b9  00000000  00000000  00000beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036c  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044f  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  00001cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <write_char>:
	return -1;
	// The address of the first segment of the display
	LCDDR0 = A;
	// The numbers 0-9, credit wikipedia might be wrong
	return success;
}
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	9f ef       	ldi	r25, 0xFF	; 255
  78:	08 95       	ret

0000007a <init_lcd>:
		
		//-----------------------------------
		// Status manipulation
		//-----------------------------------
		// enabling the lcd
		LCDCRA = LCDCRA|(1<<LCDEN);
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	80 68       	ori	r24, 0x80	; 128
  82:	80 83       	st	Z, r24
		// Setting low power wave form
		LCDCRA = LCDCRA|(1<<LCDAB);
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
		// disabling the interrupt
		LCDCRA = LCDCRA&(~(1<<LCDIF));
  8a:	80 81       	ld	r24, Z
  8c:	8f 7e       	andi	r24, 0xEF	; 239
  8e:	80 83       	st	Z, r24
		// Disabling blanking
		LCDCRA = LCDCRA&(~(1));
  90:	80 81       	ld	r24, Z
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	80 83       	st	Z, r24
		//-----------------------------------
		// Clock manipulation
		//-----------------------------------
		
		// setting the clock source to external
		LCDCRB = LCDCRB&(~(1<<LCDCS));
  96:	e5 ee       	ldi	r30, 0xE5	; 229
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
		// Setting Bias
		LCDCRB = LCDCRB&(~(1<<LCD2B));
  a0:	80 81       	ld	r24, Z
  a2:	8f 7b       	andi	r24, 0xBF	; 191
  a4:	80 83       	st	Z, r24
		// Setting duty cycle
		LCDCRB = LCDCRB&(~(3<<LCDMUX0));
  a6:	80 81       	ld	r24, Z
  a8:	8f 7c       	andi	r24, 0xCF	; 207
  aa:	80 83       	st	Z, r24
		// Setting number of active segments to 25
		LCDCRB = LCDCRB|(3);
  ac:	80 81       	ld	r24, Z
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Frame rate manipulation
		//-----------------------------------
		// Set n = 16
		LCDFRR = LCDFRR&(~(8<<LCDPS0));
  b2:	e6 ee       	ldi	r30, 0xE6	; 230
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8f 77       	andi	r24, 0x7F	; 127
  ba:	80 83       	st	Z, r24
		// Set D = 8
		LCDFRR = LCDFRR||(8);
  bc:	80 81       	ld	r24, Z
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Contrast manipulation
		//-----------------------------------
		// Setting msb->msb-2 to 0 to set drive time to 300 us
		LCDCCR = LCDCCR&(~(8<< LCDDC0));
  c2:	e7 ee       	ldi	r30, 0xE7	; 231
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 83       	st	Z, r24
		// Setting lsb -> lsb+3 to 1 to set voltage to 3.35V 
		LCDCCR = LCDCCR&((16));
  ca:	80 81       	ld	r24, Z
  cc:	80 71       	andi	r24, 0x10	; 16
  ce:	80 83       	st	Z, r24
		// Setting the contrast voltage to3.35v and drive time to 300ms
		//*LCDCCR = (*LCDCCR)&0b11111000;
		// Setting the
		//*LCDFRR = (*LCDFRR)&0b10001111;
		return success;
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <init>:
#include "../include/lcd_driver.h"


int init(void){
	// Setting power options
	CLKPR = 0x80;
  d6:	e1 e6       	ldi	r30, 0x61	; 97
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
	CLKPR = 0X00;
  de:	10 82       	st	Z, r1
	
	return success;
}
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	08 95       	ret

000000e6 <main>:

int main(void)
{
	if(success != init())
  e6:	0e 94 6b 00 	call	0xd6	; 0xd6 <init>
  ea:	89 2b       	or	r24, r25
  ec:	09 f0       	breq	.+2      	; 0xf0 <main+0xa>
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x8>
		while(1);	// Blink onboard LED or something indicating error
	if(success != init_lcd())
  f0:	0e 94 3d 00 	call	0x7a	; 0x7a <init_lcd>
  f4:	89 2b       	or	r24, r25
  f6:	09 f0       	breq	.+2      	; 0xfa <main+0x14>
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x12>
		while(1);	// Blink onboard LED or something indicating error
	write_char('a',1);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	81 e6       	ldi	r24, 0x61	; 97
 100:	0e 94 3a 00 	call	0x74	; 0x74 <write_char>
 104:	ff cf       	rjmp	.-2      	; 0x104 <main+0x1e>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
