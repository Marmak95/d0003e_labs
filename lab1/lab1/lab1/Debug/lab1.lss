
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb7  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c0  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059b  00000000  00000000  00001b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  00002118  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050a  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038f  00000000  00000000  0000275a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002ae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <write_char>:
#define REFRESH_RATE 31250					// A second measured in bits of the timer register

int write_char(char ch,int pos){
	
	// The address of the first segment of the display
	LCDDR0 = A_LSB;
  74:	81 e5       	ldi	r24, 0x51	; 81
  76:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	LCDDR1 = A_MSB;
  7a:	8f e0       	ldi	r24, 0x0F	; 15
  7c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
	
	return success;
	
	
}
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret

00000086 <write_string>:
int write_string(char* ch, int first_pos){
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	8c 01       	movw	r16, r24
  90:	cb 01       	movw	r24, r22
	first_pos = first_pos%MAX_POS;
  92:	65 e0       	ldi	r22, 0x05	; 5
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
  9a:	ec 01       	movw	r28, r24
	while(*ch != '\0'){
  9c:	0c c0       	rjmp	.+24     	; 0xb6 <write_string+0x30>
		write_char(*ch,first_pos);
  9e:	be 01       	movw	r22, r28
  a0:	0e 94 3a 00 	call	0x74	; 0x74 <write_char>
		first_pos++;
  a4:	ce 01       	movw	r24, r28
  a6:	01 96       	adiw	r24, 0x01	; 1
		first_pos = first_pos%MAX_POS;
  a8:	65 e0       	ldi	r22, 0x05	; 5
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
  b0:	ec 01       	movw	r28, r24
		ch++;
  b2:	0f 5f       	subi	r16, 0xFF	; 255
  b4:	1f 4f       	sbci	r17, 0xFF	; 255
	
	
}
int write_string(char* ch, int first_pos){
	first_pos = first_pos%MAX_POS;
	while(*ch != '\0'){
  b6:	f8 01       	movw	r30, r16
  b8:	80 81       	ld	r24, Z
  ba:	81 11       	cpse	r24, r1
  bc:	f0 cf       	rjmp	.-32     	; 0x9e <write_string+0x18>
		first_pos++;
		first_pos = first_pos%MAX_POS;
		ch++;
	}
	return success;
}
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	1f 91       	pop	r17
  c8:	0f 91       	pop	r16
  ca:	08 95       	ret

000000cc <init_lcd>:
		//-----------------------------------
		// Status manipulation
		//-----------------------------------
		
		// enabling the lcd
		LCDCRA = LCDCRA|(1<<LCDEN);
  cc:	e4 ee       	ldi	r30, 0xE4	; 228
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	80 83       	st	Z, r24
		// Setting low power wave form
		LCDCRA = LCDCRA|(1<<LCDAB);
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
		// disabling the interrupt
		LCDCRA = LCDCRA&(~(1<<LCDIF));
  dc:	80 81       	ld	r24, Z
  de:	8f 7e       	andi	r24, 0xEF	; 239
  e0:	80 83       	st	Z, r24
		// Disabling blanking
		LCDCRA = LCDCRA&(~(1));
  e2:	80 81       	ld	r24, Z
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	80 83       	st	Z, r24
		//-----------------------------------
		// Clock manipulation
		//-----------------------------------
		
		// setting the clock source to external
		LCDCRB = LCDCRB|(1<<LCDCS);
  e8:	e5 ee       	ldi	r30, 0xE5	; 229
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
		// Setting Bias
		LCDCRB = LCDCRB&(~(1<<LCD2B));
  f2:	80 81       	ld	r24, Z
  f4:	8f 7b       	andi	r24, 0xBF	; 191
  f6:	80 83       	st	Z, r24
		// Setting duty cycle
		LCDCRB = LCDCRB|((3<<LCDMUX0));
  f8:	80 81       	ld	r24, Z
  fa:	80 63       	ori	r24, 0x30	; 48
  fc:	80 83       	st	Z, r24
		// Setting number of active segments to 25
		LCDCRB = LCDCRB|(7);
  fe:	80 81       	ld	r24, Z
 100:	87 60       	ori	r24, 0x07	; 7
 102:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Frame rate manipulation
		//-----------------------------------
		// Set n = 16
		LCDFRR = LCDFRR&(~(7<<LCDPS0));
 104:	e6 ee       	ldi	r30, 0xE6	; 230
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8f 78       	andi	r24, 0x8F	; 143
 10c:	80 83       	st	Z, r24
		// Set D = 8
		LCDFRR = LCDFRR|(7);
 10e:	80 81       	ld	r24, Z
 110:	87 60       	ori	r24, 0x07	; 7
 112:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Contrast manipulation
		//-----------------------------------
		// Setting msb->msb-2 to 0 to set drive time to 300 us
		LCDCCR = LCDCCR&(~(7<< LCDDC0));
 114:	e7 ee       	ldi	r30, 0xE7	; 231
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8f 71       	andi	r24, 0x1F	; 31
 11c:	80 83       	st	Z, r24
		// Setting lsb -> lsb+3 to 1 to set voltage to 3.35V 
		LCDCCR = LCDCCR|((15));
 11e:	80 81       	ld	r24, Z
 120:	8f 60       	ori	r24, 0x0F	; 15
 122:	80 83       	st	Z, r24
		
		return success;
}
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	08 95       	ret

0000012a <revese>:




int revese(char* str){
 12a:	dc 01       	movw	r26, r24
	char * eos = str;
 12c:	fc 01       	movw	r30, r24
	while(*eos!='\0')
 12e:	01 c0       	rjmp	.+2      	; 0x132 <revese+0x8>
		eos++;
 130:	31 96       	adiw	r30, 0x01	; 1



int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
 132:	80 81       	ld	r24, Z
 134:	81 11       	cpse	r24, r1
 136:	fc cf       	rjmp	.-8      	; 0x130 <revese+0x6>
		eos++;
	eos--;
 138:	31 97       	sbiw	r30, 0x01	; 1
	while(eos>=str){
 13a:	05 c0       	rjmp	.+10     	; 0x146 <revese+0x1c>
		char temp = *eos;
 13c:	80 81       	ld	r24, Z
		*eos = *str;
 13e:	9c 91       	ld	r25, X
 140:	90 83       	st	Z, r25
		*str = temp;
 142:	8d 93       	st	X+, r24
		eos--;
 144:	31 97       	sbiw	r30, 0x01	; 1
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
		eos++;
	eos--;
	while(eos>=str){
 146:	ea 17       	cp	r30, r26
 148:	fb 07       	cpc	r31, r27
 14a:	c0 f7       	brcc	.-16     	; 0x13c <revese+0x12>
		*str = temp;
		eos--;
		str++;
	}
	return success;
}
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret

00000152 <three_least_significant>:
int three_least_significant(long num){
	return (num-(num/1000)*1000);
 152:	28 ee       	ldi	r18, 0xE8	; 232
 154:	33 e0       	ldi	r19, 0x03	; 3
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__divmodsi4>
}
 15e:	cb 01       	movw	r24, r22
 160:	08 95       	ret

00000162 <int_to_str>:
int int_to_str(uint8_t num,char* buffer){
 162:	97 2f       	mov	r25, r23
	char * start = buffer;
	while (num)
 164:	e6 2f       	mov	r30, r22
 166:	f7 2f       	mov	r31, r23
 168:	11 c0       	rjmp	.+34     	; 0x18c <int_to_str+0x2a>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
 16a:	2d ec       	ldi	r18, 0xCD	; 205
 16c:	82 9f       	mul	r24, r18
 16e:	21 2d       	mov	r18, r1
 170:	11 24       	eor	r1, r1
 172:	26 95       	lsr	r18
 174:	26 95       	lsr	r18
 176:	26 95       	lsr	r18
 178:	42 2f       	mov	r20, r18
 17a:	44 0f       	add	r20, r20
 17c:	34 2f       	mov	r19, r20
 17e:	33 0f       	add	r19, r19
 180:	33 0f       	add	r19, r19
 182:	34 0f       	add	r19, r20
 184:	83 1b       	sub	r24, r19
 186:	80 5d       	subi	r24, 0xD0	; 208
 188:	81 93       	st	Z+, r24
		num/=10;
 18a:	82 2f       	mov	r24, r18
int three_least_significant(long num){
	return (num-(num/1000)*1000);
}
int int_to_str(uint8_t num,char* buffer){
	char * start = buffer;
	while (num)
 18c:	81 11       	cpse	r24, r1
 18e:	ed cf       	rjmp	.-38     	; 0x16a <int_to_str+0x8>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
		num/=10;
		buffer++;
	}
	*buffer = '\0';
 190:	10 82       	st	Z, r1
	revese(start);
 192:	86 2f       	mov	r24, r22
 194:	0e 94 95 00 	call	0x12a	; 0x12a <revese>
	return success;
}
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	08 95       	ret

0000019e <is_prime>:
int is_prime(long num){
 19e:	cf 92       	push	r12
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	cf 93       	push	r28
 1a8:	6b 01       	movw	r12, r22
 1aa:	7c 01       	movw	r14, r24
	
	// base cases 0-3
	if (num <= 3)
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	c8 16       	cp	r12, r24
 1b0:	d1 04       	cpc	r13, r1
 1b2:	e1 04       	cpc	r14, r1
 1b4:	f1 04       	cpc	r15, r1
 1b6:	24 f1       	brlt	.+72     	; 0x200 <__EEPROM_REGION_LENGTH__>
		return 1;
	// base case num is even
	if(num%2 == 0)
 1b8:	c0 fe       	sbrs	r12, 0
 1ba:	25 c0       	rjmp	.+74     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 1bc:	c3 e0       	ldi	r28, 0x03	; 3
 1be:	09 c0       	rjmp	.+18     	; 0x1d2 <is_prime+0x34>
		return 0;
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
		if(num%counter == 0)
 1c0:	c7 01       	movw	r24, r14
 1c2:	b6 01       	movw	r22, r12
 1c4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__divmodsi4>
 1c8:	67 2b       	or	r22, r23
 1ca:	68 2b       	or	r22, r24
 1cc:	69 2b       	or	r22, r25
 1ce:	f1 f0       	breq	.+60     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
			return 0;
		counter+=2;
 1d0:	ce 5f       	subi	r28, 0xFE	; 254
	if(num%2 == 0)
		return 0;
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
 1d2:	2c 2f       	mov	r18, r28
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	d7 01       	movw	r26, r14
 1dc:	c6 01       	movw	r24, r12
 1de:	ff 20       	and	r15, r15
 1e0:	1c f4       	brge	.+6      	; 0x1e8 <is_prime+0x4a>
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	a1 1d       	adc	r26, r1
 1e6:	b1 1d       	adc	r27, r1
 1e8:	b5 95       	asr	r27
 1ea:	a7 95       	ror	r26
 1ec:	97 95       	ror	r25
 1ee:	87 95       	ror	r24
 1f0:	28 17       	cp	r18, r24
 1f2:	39 07       	cpc	r19, r25
 1f4:	4a 07       	cpc	r20, r26
 1f6:	5b 07       	cpc	r21, r27
 1f8:	1c f3       	brlt	.-58     	; 0x1c0 <is_prime+0x22>
		if(num%counter == 0)
			return 0;
		counter+=2;
	}
	return 1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
}
int is_prime(long num){
	
	// base cases 0-3
	if (num <= 3)
		return 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	05 c0       	rjmp	.+10     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
	// base case num is even
	if(num%2 == 0)
		return 0;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
		if(num%counter == 0)
			return 0;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
		counter+=2;
	}
	return 1;
}
 210:	cf 91       	pop	r28
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	df 90       	pop	r13
 218:	cf 90       	pop	r12
 21a:	08 95       	ret

0000021c <primes>:

int primes(){
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	2a 97       	sbiw	r28, 0x0a	; 10
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
	long num = 1;
 230:	c1 2c       	mov	r12, r1
 232:	d1 2c       	mov	r13, r1
 234:	76 01       	movw	r14, r12
 236:	c3 94       	inc	r12
	while(1)
	{
		if(num >= 3){
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	c8 16       	cp	r12, r24
 23c:	d1 04       	cpc	r13, r1
 23e:	e1 04       	cpc	r14, r1
 240:	f1 04       	cpc	r15, r1
 242:	74 f0       	brlt	.+28     	; 0x260 <primes+0x44>
			if (num%2 == 0)
 244:	c0 fc       	sbrc	r12, 0
 246:	06 c0       	rjmp	.+12     	; 0x254 <primes+0x38>
				num++;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	c8 1a       	sub	r12, r24
 24c:	d8 0a       	sbc	r13, r24
 24e:	e8 0a       	sbc	r14, r24
 250:	f8 0a       	sbc	r15, r24
 252:	0b c0       	rjmp	.+22     	; 0x26a <primes+0x4e>
			else
				num +=2;	
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	c8 0e       	add	r12, r24
 258:	d1 1c       	adc	r13, r1
 25a:	e1 1c       	adc	r14, r1
 25c:	f1 1c       	adc	r15, r1
 25e:	05 c0       	rjmp	.+10     	; 0x26a <primes+0x4e>
		}
		else 
			num++;
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	c8 1a       	sub	r12, r24
 264:	d8 0a       	sbc	r13, r24
 266:	e8 0a       	sbc	r14, r24
 268:	f8 0a       	sbc	r15, r24
		if(is_prime(num)==1){
 26a:	c7 01       	movw	r24, r14
 26c:	b6 01       	movw	r22, r12
 26e:	0e 94 cf 00 	call	0x19e	; 0x19e <is_prime>
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	09 f7       	brne	.-62     	; 0x238 <primes+0x1c>
			uint8_t temp = three_least_significant(num);
 276:	c7 01       	movw	r24, r14
 278:	b6 01       	movw	r22, r12
 27a:	0e 94 a9 00 	call	0x152	; 0x152 <three_least_significant>
		
		
			char buffer[10];
			int_to_str(temp,buffer);
 27e:	be 01       	movw	r22, r28
 280:	6f 5f       	subi	r22, 0xFF	; 255
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	0e 94 b1 00 	call	0x162	; 0x162 <int_to_str>
			write_string(buffer,0);
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	ce 01       	movw	r24, r28
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	0e 94 43 00 	call	0x86	; 0x86 <write_string>
 294:	d1 cf       	rjmp	.-94     	; 0x238 <primes+0x1c>

00000296 <init>:
	
	while(1){
		while(prev_value!=(PINB&(1<<7))>>7);
		while(prev_value == (PINB&(1<<7))>>7);
		toggle_led();
	}
 296:	e1 e6       	ldi	r30, 0x61	; 97
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 e8       	ldi	r24, 0x80	; 128
 29c:	80 83       	st	Z, r24
 29e:	10 82       	st	Z, r1
 2a0:	e1 e8       	ldi	r30, 0x81	; 129
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	84 60       	ori	r24, 0x04	; 4
 2a8:	80 83       	st	Z, r24
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	85 b9       	out	0x05, r24	; 5
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	08 95       	ret

000002b6 <main>:
	
}

int main(void)
{
	if(success != init())
 2b6:	0e 94 4b 01 	call	0x296	; 0x296 <init>
 2ba:	89 2b       	or	r24, r25
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <main+0xa>
 2be:	ff cf       	rjmp	.-2      	; 0x2be <main+0x8>
		while(1);	// Blink onboard LED or something indicating error
	if(success != init_lcd())
 2c0:	0e 94 66 00 	call	0xcc	; 0xcc <init_lcd>
 2c4:	89 2b       	or	r24, r25
 2c6:	09 f0       	breq	.+2      	; 0x2ca <main+0x14>
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <main+0x12>
		while(1);	// Blink onboard LED or something indicating error
	//write_char('a',1);
	//blink();
	//button();
	primes();
 2ca:	0e 94 0e 01 	call	0x21c	; 0x21c <primes>
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <main+0x18>

000002d0 <__divmodhi4>:
 2d0:	97 fb       	bst	r25, 7
 2d2:	07 2e       	mov	r0, r23
 2d4:	16 f4       	brtc	.+4      	; 0x2da <__divmodhi4+0xa>
 2d6:	00 94       	com	r0
 2d8:	07 d0       	rcall	.+14     	; 0x2e8 <__divmodhi4_neg1>
 2da:	77 fd       	sbrc	r23, 7
 2dc:	09 d0       	rcall	.+18     	; 0x2f0 <__divmodhi4_neg2>
 2de:	0e 94 9b 01 	call	0x336	; 0x336 <__udivmodhi4>
 2e2:	07 fc       	sbrc	r0, 7
 2e4:	05 d0       	rcall	.+10     	; 0x2f0 <__divmodhi4_neg2>
 2e6:	3e f4       	brtc	.+14     	; 0x2f6 <__divmodhi4_exit>

000002e8 <__divmodhi4_neg1>:
 2e8:	90 95       	com	r25
 2ea:	81 95       	neg	r24
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	08 95       	ret

000002f0 <__divmodhi4_neg2>:
 2f0:	70 95       	com	r23
 2f2:	61 95       	neg	r22
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255

000002f6 <__divmodhi4_exit>:
 2f6:	08 95       	ret

000002f8 <__divmodsi4>:
 2f8:	05 2e       	mov	r0, r21
 2fa:	97 fb       	bst	r25, 7
 2fc:	1e f4       	brtc	.+6      	; 0x304 <__divmodsi4+0xc>
 2fe:	00 94       	com	r0
 300:	0e 94 93 01 	call	0x326	; 0x326 <__negsi2>
 304:	57 fd       	sbrc	r21, 7
 306:	07 d0       	rcall	.+14     	; 0x316 <__divmodsi4_neg2>
 308:	0e 94 af 01 	call	0x35e	; 0x35e <__udivmodsi4>
 30c:	07 fc       	sbrc	r0, 7
 30e:	03 d0       	rcall	.+6      	; 0x316 <__divmodsi4_neg2>
 310:	4e f4       	brtc	.+18     	; 0x324 <__divmodsi4_exit>
 312:	0c 94 93 01 	jmp	0x326	; 0x326 <__negsi2>

00000316 <__divmodsi4_neg2>:
 316:	50 95       	com	r21
 318:	40 95       	com	r20
 31a:	30 95       	com	r19
 31c:	21 95       	neg	r18
 31e:	3f 4f       	sbci	r19, 0xFF	; 255
 320:	4f 4f       	sbci	r20, 0xFF	; 255
 322:	5f 4f       	sbci	r21, 0xFF	; 255

00000324 <__divmodsi4_exit>:
 324:	08 95       	ret

00000326 <__negsi2>:
 326:	90 95       	com	r25
 328:	80 95       	com	r24
 32a:	70 95       	com	r23
 32c:	61 95       	neg	r22
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	8f 4f       	sbci	r24, 0xFF	; 255
 332:	9f 4f       	sbci	r25, 0xFF	; 255
 334:	08 95       	ret

00000336 <__udivmodhi4>:
 336:	aa 1b       	sub	r26, r26
 338:	bb 1b       	sub	r27, r27
 33a:	51 e1       	ldi	r21, 0x11	; 17
 33c:	07 c0       	rjmp	.+14     	; 0x34c <__udivmodhi4_ep>

0000033e <__udivmodhi4_loop>:
 33e:	aa 1f       	adc	r26, r26
 340:	bb 1f       	adc	r27, r27
 342:	a6 17       	cp	r26, r22
 344:	b7 07       	cpc	r27, r23
 346:	10 f0       	brcs	.+4      	; 0x34c <__udivmodhi4_ep>
 348:	a6 1b       	sub	r26, r22
 34a:	b7 0b       	sbc	r27, r23

0000034c <__udivmodhi4_ep>:
 34c:	88 1f       	adc	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	5a 95       	dec	r21
 352:	a9 f7       	brne	.-22     	; 0x33e <__udivmodhi4_loop>
 354:	80 95       	com	r24
 356:	90 95       	com	r25
 358:	bc 01       	movw	r22, r24
 35a:	cd 01       	movw	r24, r26
 35c:	08 95       	ret

0000035e <__udivmodsi4>:
 35e:	a1 e2       	ldi	r26, 0x21	; 33
 360:	1a 2e       	mov	r1, r26
 362:	aa 1b       	sub	r26, r26
 364:	bb 1b       	sub	r27, r27
 366:	fd 01       	movw	r30, r26
 368:	0d c0       	rjmp	.+26     	; 0x384 <__udivmodsi4_ep>

0000036a <__udivmodsi4_loop>:
 36a:	aa 1f       	adc	r26, r26
 36c:	bb 1f       	adc	r27, r27
 36e:	ee 1f       	adc	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	a2 17       	cp	r26, r18
 374:	b3 07       	cpc	r27, r19
 376:	e4 07       	cpc	r30, r20
 378:	f5 07       	cpc	r31, r21
 37a:	20 f0       	brcs	.+8      	; 0x384 <__udivmodsi4_ep>
 37c:	a2 1b       	sub	r26, r18
 37e:	b3 0b       	sbc	r27, r19
 380:	e4 0b       	sbc	r30, r20
 382:	f5 0b       	sbc	r31, r21

00000384 <__udivmodsi4_ep>:
 384:	66 1f       	adc	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	88 1f       	adc	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	1a 94       	dec	r1
 38e:	69 f7       	brne	.-38     	; 0x36a <__udivmodsi4_loop>
 390:	60 95       	com	r22
 392:	70 95       	com	r23
 394:	80 95       	com	r24
 396:	90 95       	com	r25
 398:	9b 01       	movw	r18, r22
 39a:	ac 01       	movw	r20, r24
 39c:	bd 01       	movw	r22, r26
 39e:	cf 01       	movw	r24, r30
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
