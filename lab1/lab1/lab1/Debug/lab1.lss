
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c94  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c0  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000589  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  00002028  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050a  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000390  00000000  00000000  0000266a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000029fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  6c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <init_lcd>:
		//-----------------------------------
		// Status manipulation
		//-----------------------------------
		
		// enabling the lcd
		LCDCRA = LCDCRA|(1<<LCDEN);
  74:	e4 ee       	ldi	r30, 0xE4	; 228
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 81       	ld	r24, Z
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	80 83       	st	Z, r24
		// Setting low power wave form
		LCDCRA = LCDCRA|(1<<LCDAB);
  7e:	80 81       	ld	r24, Z
  80:	80 64       	ori	r24, 0x40	; 64
  82:	80 83       	st	Z, r24
		// disabling the interrupt
		LCDCRA = LCDCRA&(~(1<<LCDIF));
  84:	80 81       	ld	r24, Z
  86:	8f 7e       	andi	r24, 0xEF	; 239
  88:	80 83       	st	Z, r24
		// Disabling blanking
		LCDCRA = LCDCRA&(~(1));
  8a:	80 81       	ld	r24, Z
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	80 83       	st	Z, r24
		//-----------------------------------
		// Clock manipulation
		//-----------------------------------
		
		// setting the clock source to external
		LCDCRB = LCDCRB|(1<<LCDCS);
  90:	e5 ee       	ldi	r30, 0xE5	; 229
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
		// Setting Bias
		LCDCRB = LCDCRB&(~(1<<LCD2B));
  9a:	80 81       	ld	r24, Z
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	80 83       	st	Z, r24
		// Setting duty cycle
		LCDCRB = LCDCRB|((3<<LCDMUX0));
  a0:	80 81       	ld	r24, Z
  a2:	80 63       	ori	r24, 0x30	; 48
  a4:	80 83       	st	Z, r24
		// Setting number of active segments to 25
		LCDCRB = LCDCRB|(7);
  a6:	80 81       	ld	r24, Z
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Frame rate manipulation
		//-----------------------------------
		// Set n = 16
		LCDFRR = LCDFRR&(~(7<<LCDPS0));
  ac:	e6 ee       	ldi	r30, 0xE6	; 230
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8f 78       	andi	r24, 0x8F	; 143
  b4:	80 83       	st	Z, r24
		// Set D = 8
		LCDFRR = LCDFRR|(7);
  b6:	80 81       	ld	r24, Z
  b8:	87 60       	ori	r24, 0x07	; 7
  ba:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Contrast manipulation
		//-----------------------------------
		// Setting msb->msb-2 to 0 to set drive time to 300 us
		LCDCCR = LCDCCR&(~(7<< LCDDC0));
  bc:	e7 ee       	ldi	r30, 0xE7	; 231
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	8f 71       	andi	r24, 0x1F	; 31
  c4:	80 83       	st	Z, r24
		// Setting lsb -> lsb+3 to 1 to set voltage to 3.35V 
		LCDCCR = LCDCCR|((15));
  c6:	80 81       	ld	r24, Z
  c8:	8f 60       	ori	r24, 0x0F	; 15
  ca:	80 83       	st	Z, r24
		
		return success;
}
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret

000000d2 <revese>:




int revese(char* str){
  d2:	dc 01       	movw	r26, r24
	char * eos = str;
  d4:	fc 01       	movw	r30, r24
	while(*eos!='\0')
  d6:	01 c0       	rjmp	.+2      	; 0xda <revese+0x8>
		eos++;
  d8:	31 96       	adiw	r30, 0x01	; 1



int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
  da:	80 81       	ld	r24, Z
  dc:	81 11       	cpse	r24, r1
  de:	fc cf       	rjmp	.-8      	; 0xd8 <revese+0x6>
		eos++;
	eos--;
  e0:	31 97       	sbiw	r30, 0x01	; 1
	while(eos>=str){
  e2:	05 c0       	rjmp	.+10     	; 0xee <revese+0x1c>
		char temp = *eos;
  e4:	80 81       	ld	r24, Z
		*eos = *str;
  e6:	9c 91       	ld	r25, X
  e8:	90 83       	st	Z, r25
		*str = temp;
  ea:	8d 93       	st	X+, r24
		eos--;
  ec:	31 97       	sbiw	r30, 0x01	; 1
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
		eos++;
	eos--;
	while(eos>=str){
  ee:	ea 17       	cp	r30, r26
  f0:	fb 07       	cpc	r31, r27
  f2:	c0 f7       	brcc	.-16     	; 0xe4 <revese+0x12>
		*str = temp;
		eos--;
		str++;
	}
	return success;
}
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	08 95       	ret

000000fa <three_least_significant>:
int three_least_significant(long num){
	return (num-(num/1000)*1000);
  fa:	28 ee       	ldi	r18, 0xE8	; 232
  fc:	33 e0       	ldi	r19, 0x03	; 3
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	0e 94 33 01 	call	0x266	; 0x266 <__divmodsi4>
}
 106:	cb 01       	movw	r24, r22
 108:	08 95       	ret

0000010a <int_to_str>:
int int_to_str(uint8_t num,char* buffer){
 10a:	97 2f       	mov	r25, r23
	char * start = buffer;
	while (num)
 10c:	e6 2f       	mov	r30, r22
 10e:	f7 2f       	mov	r31, r23
 110:	11 c0       	rjmp	.+34     	; 0x134 <int_to_str+0x2a>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
 112:	2d ec       	ldi	r18, 0xCD	; 205
 114:	82 9f       	mul	r24, r18
 116:	21 2d       	mov	r18, r1
 118:	11 24       	eor	r1, r1
 11a:	26 95       	lsr	r18
 11c:	26 95       	lsr	r18
 11e:	26 95       	lsr	r18
 120:	42 2f       	mov	r20, r18
 122:	44 0f       	add	r20, r20
 124:	34 2f       	mov	r19, r20
 126:	33 0f       	add	r19, r19
 128:	33 0f       	add	r19, r19
 12a:	34 0f       	add	r19, r20
 12c:	83 1b       	sub	r24, r19
 12e:	80 5d       	subi	r24, 0xD0	; 208
 130:	81 93       	st	Z+, r24
		num/=10;
 132:	82 2f       	mov	r24, r18
int three_least_significant(long num){
	return (num-(num/1000)*1000);
}
int int_to_str(uint8_t num,char* buffer){
	char * start = buffer;
	while (num)
 134:	81 11       	cpse	r24, r1
 136:	ed cf       	rjmp	.-38     	; 0x112 <int_to_str+0x8>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
		num/=10;
		buffer++;
	}
	*buffer = '\0';
 138:	10 82       	st	Z, r1
	revese(start);
 13a:	86 2f       	mov	r24, r22
 13c:	0e 94 69 00 	call	0xd2	; 0xd2 <revese>
	return success;
}
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	08 95       	ret

00000146 <is_prime>:
int is_prime(long num){
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	cf 93       	push	r28
 150:	6b 01       	movw	r12, r22
 152:	7c 01       	movw	r14, r24
	
	// base cases 0-3
	if (num <= 3)
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	c8 16       	cp	r12, r24
 158:	d1 04       	cpc	r13, r1
 15a:	e1 04       	cpc	r14, r1
 15c:	f1 04       	cpc	r15, r1
 15e:	24 f1       	brlt	.+72     	; 0x1a8 <is_prime+0x62>
		return 1;
	// base case num is even
	if(num%2 == 0)
 160:	c0 fe       	sbrs	r12, 0
 162:	25 c0       	rjmp	.+74     	; 0x1ae <is_prime+0x68>
 164:	c3 e0       	ldi	r28, 0x03	; 3
 166:	09 c0       	rjmp	.+18     	; 0x17a <is_prime+0x34>
		return 0;
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
		if(num%counter == 0)
 168:	c7 01       	movw	r24, r14
 16a:	b6 01       	movw	r22, r12
 16c:	0e 94 33 01 	call	0x266	; 0x266 <__divmodsi4>
 170:	67 2b       	or	r22, r23
 172:	68 2b       	or	r22, r24
 174:	69 2b       	or	r22, r25
 176:	f1 f0       	breq	.+60     	; 0x1b4 <is_prime+0x6e>
			return 0;
		counter+=2;
 178:	ce 5f       	subi	r28, 0xFE	; 254
	if(num%2 == 0)
		return 0;
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
 17a:	2c 2f       	mov	r18, r28
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	d7 01       	movw	r26, r14
 184:	c6 01       	movw	r24, r12
 186:	ff 20       	and	r15, r15
 188:	1c f4       	brge	.+6      	; 0x190 <is_prime+0x4a>
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	a1 1d       	adc	r26, r1
 18e:	b1 1d       	adc	r27, r1
 190:	b5 95       	asr	r27
 192:	a7 95       	ror	r26
 194:	97 95       	ror	r25
 196:	87 95       	ror	r24
 198:	28 17       	cp	r18, r24
 19a:	39 07       	cpc	r19, r25
 19c:	4a 07       	cpc	r20, r26
 19e:	5b 07       	cpc	r21, r27
 1a0:	1c f3       	brlt	.-58     	; 0x168 <is_prime+0x22>
		if(num%counter == 0)
			return 0;
		counter+=2;
	}
	return 1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <is_prime+0x72>
}
int is_prime(long num){
	
	// base cases 0-3
	if (num <= 3)
		return 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <is_prime+0x72>
	// base case num is even
	if(num%2 == 0)
		return 0;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <is_prime+0x72>
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
		if(num%counter == 0)
			return 0;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
		counter+=2;
	}
	return 1;
}
 1b8:	cf 91       	pop	r28
 1ba:	ff 90       	pop	r15
 1bc:	ef 90       	pop	r14
 1be:	df 90       	pop	r13
 1c0:	cf 90       	pop	r12
 1c2:	08 95       	ret

000001c4 <primes>:

int primes(){
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	2a 97       	sbiw	r28, 0x0a	; 10
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
	long num = 100;
 1d8:	0f 2e       	mov	r0, r31
 1da:	f4 e6       	ldi	r31, 0x64	; 100
 1dc:	cf 2e       	mov	r12, r31
 1de:	d1 2c       	mov	r13, r1
 1e0:	e1 2c       	mov	r14, r1
 1e2:	f1 2c       	mov	r15, r1
 1e4:	f0 2d       	mov	r31, r0
	while(1)
	{
		if(num >= 3){
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	c8 16       	cp	r12, r24
 1ea:	d1 04       	cpc	r13, r1
 1ec:	e1 04       	cpc	r14, r1
 1ee:	f1 04       	cpc	r15, r1
 1f0:	6c f0       	brlt	.+26     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
			if (num%2 == 0)
 1f2:	c0 fc       	sbrc	r12, 0
 1f4:	06 c0       	rjmp	.+12     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
				num++;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	c8 1a       	sub	r12, r24
 1fa:	d8 0a       	sbc	r13, r24
 1fc:	e8 0a       	sbc	r14, r24
 1fe:	f8 0a       	sbc	r15, r24
 200:	05 c0       	rjmp	.+10     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
			else
				num +=2;	
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	c8 0e       	add	r12, r24
 206:	d1 1c       	adc	r13, r1
 208:	e1 1c       	adc	r14, r1
 20a:	f1 1c       	adc	r15, r1
		}
		if(is_prime(num)==1){
 20c:	c7 01       	movw	r24, r14
 20e:	b6 01       	movw	r22, r12
 210:	0e 94 a3 00 	call	0x146	; 0x146 <is_prime>
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	39 f7       	brne	.-50     	; 0x1e6 <primes+0x22>
			uint8_t temp = three_least_significant(num);
 218:	c7 01       	movw	r24, r14
 21a:	b6 01       	movw	r22, r12
 21c:	0e 94 7d 00 	call	0xfa	; 0xfa <three_least_significant>
		
		
			char buffer[10];
			int_to_str(temp,buffer);
 220:	be 01       	movw	r22, r28
 222:	6f 5f       	subi	r22, 0xFF	; 255
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	0e 94 85 00 	call	0x10a	; 0x10a <int_to_str>
 22a:	dd cf       	rjmp	.-70     	; 0x1e6 <primes+0x22>

0000022c <init>:
	
	while(1){
		while(prev_value!=(PINB&(1<<7))>>7);
		while(prev_value == (PINB&(1<<7))>>7);
		toggle_led();
	}
 22c:	e1 e6       	ldi	r30, 0x61	; 97
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 e8       	ldi	r24, 0x80	; 128
 232:	80 83       	st	Z, r24
 234:	10 82       	st	Z, r1
 236:	e1 e8       	ldi	r30, 0x81	; 129
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	84 60       	ori	r24, 0x04	; 4
 23e:	80 83       	st	Z, r24
 240:	85 b1       	in	r24, 0x05	; 5
 242:	80 68       	ori	r24, 0x80	; 128
 244:	85 b9       	out	0x05, r24	; 5
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	08 95       	ret

0000024c <main>:
	
}

int main(void)
{
	if(success != init())
 24c:	0e 94 16 01 	call	0x22c	; 0x22c <init>
 250:	89 2b       	or	r24, r25
 252:	09 f0       	breq	.+2      	; 0x256 <main+0xa>
 254:	ff cf       	rjmp	.-2      	; 0x254 <main+0x8>
		while(1);	// Blink onboard LED or something indicating error
	if(success != init_lcd())
 256:	0e 94 3a 00 	call	0x74	; 0x74 <init_lcd>
 25a:	89 2b       	or	r24, r25
 25c:	09 f0       	breq	.+2      	; 0x260 <main+0x14>
 25e:	ff cf       	rjmp	.-2      	; 0x25e <main+0x12>
		while(1);	// Blink onboard LED or something indicating error
	//write_char('a',1);
	//blink();
	//button();
	primes();
 260:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <primes>
 264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x18>

00000266 <__divmodsi4>:
 266:	05 2e       	mov	r0, r21
 268:	97 fb       	bst	r25, 7
 26a:	1e f4       	brtc	.+6      	; 0x272 <__divmodsi4+0xc>
 26c:	00 94       	com	r0
 26e:	0e 94 4a 01 	call	0x294	; 0x294 <__negsi2>
 272:	57 fd       	sbrc	r21, 7
 274:	07 d0       	rcall	.+14     	; 0x284 <__divmodsi4_neg2>
 276:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__udivmodsi4>
 27a:	07 fc       	sbrc	r0, 7
 27c:	03 d0       	rcall	.+6      	; 0x284 <__divmodsi4_neg2>
 27e:	4e f4       	brtc	.+18     	; 0x292 <__divmodsi4_exit>
 280:	0c 94 4a 01 	jmp	0x294	; 0x294 <__negsi2>

00000284 <__divmodsi4_neg2>:
 284:	50 95       	com	r21
 286:	40 95       	com	r20
 288:	30 95       	com	r19
 28a:	21 95       	neg	r18
 28c:	3f 4f       	sbci	r19, 0xFF	; 255
 28e:	4f 4f       	sbci	r20, 0xFF	; 255
 290:	5f 4f       	sbci	r21, 0xFF	; 255

00000292 <__divmodsi4_exit>:
 292:	08 95       	ret

00000294 <__negsi2>:
 294:	90 95       	com	r25
 296:	80 95       	com	r24
 298:	70 95       	com	r23
 29a:	61 95       	neg	r22
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	8f 4f       	sbci	r24, 0xFF	; 255
 2a0:	9f 4f       	sbci	r25, 0xFF	; 255
 2a2:	08 95       	ret

000002a4 <__udivmodsi4>:
 2a4:	a1 e2       	ldi	r26, 0x21	; 33
 2a6:	1a 2e       	mov	r1, r26
 2a8:	aa 1b       	sub	r26, r26
 2aa:	bb 1b       	sub	r27, r27
 2ac:	fd 01       	movw	r30, r26
 2ae:	0d c0       	rjmp	.+26     	; 0x2ca <__udivmodsi4_ep>

000002b0 <__udivmodsi4_loop>:
 2b0:	aa 1f       	adc	r26, r26
 2b2:	bb 1f       	adc	r27, r27
 2b4:	ee 1f       	adc	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	a2 17       	cp	r26, r18
 2ba:	b3 07       	cpc	r27, r19
 2bc:	e4 07       	cpc	r30, r20
 2be:	f5 07       	cpc	r31, r21
 2c0:	20 f0       	brcs	.+8      	; 0x2ca <__udivmodsi4_ep>
 2c2:	a2 1b       	sub	r26, r18
 2c4:	b3 0b       	sbc	r27, r19
 2c6:	e4 0b       	sbc	r30, r20
 2c8:	f5 0b       	sbc	r31, r21

000002ca <__udivmodsi4_ep>:
 2ca:	66 1f       	adc	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	88 1f       	adc	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	1a 94       	dec	r1
 2d4:	69 f7       	brne	.-38     	; 0x2b0 <__udivmodsi4_loop>
 2d6:	60 95       	com	r22
 2d8:	70 95       	com	r23
 2da:	80 95       	com	r24
 2dc:	90 95       	com	r25
 2de:	9b 01       	movw	r18, r22
 2e0:	ac 01       	movw	r20, r24
 2e2:	bd 01       	movw	r22, r26
 2e4:	cf 01       	movw	r24, r30
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
