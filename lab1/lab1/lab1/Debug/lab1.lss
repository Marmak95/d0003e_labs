
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b23  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000965  00000000  00000000  00000da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ba  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d8  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ca  00000000  00000000  000021ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002376  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <init_lcd>:
		counter+=2;
	}
	return 0;
}

int primes(){
  74:	e4 ee       	ldi	r30, 0xE4	; 228
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 81       	ld	r24, Z
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	80 83       	st	Z, r24
  7e:	80 81       	ld	r24, Z
  80:	80 64       	ori	r24, 0x40	; 64
  82:	80 83       	st	Z, r24
  84:	80 81       	ld	r24, Z
  86:	8f 7e       	andi	r24, 0xEF	; 239
  88:	80 83       	st	Z, r24
  8a:	80 81       	ld	r24, Z
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	80 83       	st	Z, r24
  90:	e5 ee       	ldi	r30, 0xE5	; 229
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
  9a:	80 81       	ld	r24, Z
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	80 83       	st	Z, r24
  a0:	80 81       	ld	r24, Z
  a2:	80 63       	ori	r24, 0x30	; 48
  a4:	80 83       	st	Z, r24
  a6:	80 81       	ld	r24, Z
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	80 83       	st	Z, r24
  ac:	e6 ee       	ldi	r30, 0xE6	; 230
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8f 78       	andi	r24, 0x8F	; 143
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	87 60       	ori	r24, 0x07	; 7
  ba:	80 83       	st	Z, r24
  bc:	e7 ee       	ldi	r30, 0xE7	; 231
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	8f 71       	andi	r24, 0x1F	; 31
  c4:	80 83       	st	Z, r24
  c6:	80 81       	ld	r24, Z
  c8:	8f 60       	ori	r24, 0x0F	; 15
  ca:	80 83       	st	Z, r24
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret

000000d2 <toggle_led>:
	return 0;
}

int toggle_led(){
	// Negate bit 1 in the LCDR0
	if((LCDDR0^2)== 0)
  d2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	19 f4       	brne	.+6      	; 0xe0 <toggle_led+0xe>
		LCDDR0=0;
  da:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
  de:	03 c0       	rjmp	.+6      	; 0xe6 <toggle_led+0x14>
	else
		LCDDR0=2;
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	return 0;
}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret

000000ec <init>:
#define TIMER_SCALING_1    0b001
#define TIMER_STOP		   0b000

int init(void){
	// Setting power options
	CLKPR = 0x80;
  ec:	e1 e6       	ldi	r30, 0x61	; 97
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	80 83       	st	Z, r24
	CLKPR = 0X00;
  f4:	10 82       	st	Z, r1
	
	
	// Setting the presacling factor to 256
	TCCR1B = TCCR1B|TIMER_SCALING_256;
  f6:	e1 e8       	ldi	r30, 0x81	; 129
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	80 83       	st	Z, r24
	
	// Setting the pullup
	PORTB = PORTB|(1<<7);
 100:	85 b1       	in	r24, 0x05	; 5
 102:	80 68       	ori	r24, 0x80	; 128
 104:	85 b9       	out	0x05, r24	; 5
	
	return success;
}
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	08 95       	ret

0000010c <button>:

int button(){
	uint8_t prev_value = 1;
	
	while(1){
		while(prev_value!=(PINB&(1<<7))>>7);
 10c:	1f 9b       	sbis	0x03, 7	; 3
 10e:	fe cf       	rjmp	.-4      	; 0x10c <button>
		while(prev_value == (PINB&(1<<7))>>7);
 110:	1f 99       	sbic	0x03, 7	; 3
 112:	fe cf       	rjmp	.-4      	; 0x110 <button+0x4>
		toggle_led();
 114:	0e 94 69 00 	call	0xd2	; 0xd2 <toggle_led>
	}
 118:	f9 cf       	rjmp	.-14     	; 0x10c <button>

0000011a <main>:
	
}

int main(void)
{
	if(success != init())
 11a:	0e 94 76 00 	call	0xec	; 0xec <init>
 11e:	89 2b       	or	r24, r25
 120:	09 f0       	breq	.+2      	; 0x124 <main+0xa>
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x8>
		while(1);	// Blink onboard LED or something indicating error
	if(success != init_lcd())
 124:	0e 94 3a 00 	call	0x74	; 0x74 <init_lcd>
 128:	89 2b       	or	r24, r25
 12a:	09 f0       	breq	.+2      	; 0x12e <main+0x14>
 12c:	ff cf       	rjmp	.-2      	; 0x12c <main+0x12>
		while(1);	// Blink onboard LED or something indicating error
	//write_char('a',1);
	//blink();
	button();
 12e:	0e 94 86 00 	call	0x10c	; 0x10c <button>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
